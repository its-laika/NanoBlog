openapi: 3.0.3
info:
  title: neon-js/NanoBlog
  description: |-
    A simplistic blogging system
    NanoBlog is a blogging system on file basis, therefore it doesn't use a database, scripting or cookies.
  contact:
    email: github+curly@likely.gay
  license:
    name: MIT
    url: https://github.com/neon-JS/NanoBlog/blob/main/LICENSE
  version: 0.0.12
externalDocs:
  description: Github repository
  url: https://github.com/neon-JS/NanoBlog
servers:
  - url: http://localhost:5023/
tags:
  - name: assets
    description: Control files that can be included into the blog
  - name: posts
    description: Control the posts of the blog
  - name: structure
    description: Control basic blog structure
  - name: export
    description: Control exporting stashed changes
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    MimeTypeError:
      description: MIME type error (e.g. MIME type is not identifiable or MIME types differ when trying to update existing asset)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    CreatedAt:
      description: A resource was created successfully
      headers:
        Location:
          schema:
            type: string
          description: URL of the new asset. Given file name will be overridden
    FileList:
      description: Responded with a list of existing file names
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              description: File name
              example: 638075963053552470-0747b6f6-c677-49fb-bbde-53addf7b3b71.png
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          example: https://www.rfc-editor.org/rfc/rfc2324#section-2.3.2
        title:
          type: string
          example: I'm a teapot
        status:
          type: number
          example: 418
        traceId:
          type: string
          example: 00-420b7c937b9403217d4b8e97be0bef05-024ecd9aa651ee47-00
      required:
        - type
        - title
        - status
        - traceId
security:
  - bearerAuth: []
paths:
  /assets:
    get:
      tags:
        - assets
      summary: Gets list of assets
      description: Gets list of all stored assets names
      responses:
        '200':
          $ref: '#/components/responses/FileList'
        '401':
          $ref: '#/components/responses/Unauthorized' 
    post:
      tags:
        - assets
      summary: Stores new asset
      description: Stores new asset by given file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: File to be stored as form data string
                  type: string
                  format: binary
        required: true
      responses:
        '201':
          $ref: '#/components/responses/CreatedAt' 
        '400':
          $ref: '#/components/responses/MimeTypeError'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /assets/{fileName}:
    get:
      parameters:
        - name: fileName
          in: path
          description: File name of asset
          required: true
          schema:
            type: string
      tags:
        - assets
      summary: Returns assets file content
      description: Returns file content by asset file name
      responses:
        '200':
          description: Stored asset file
          content:
            image/*:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      parameters:
        - name: fileName
          in: path
          description: File name of asset
          required: true
          schema:
            type: string
      tags:
        - assets
      summary: Updates an asset
      description: Updates an existing asset by asset file name
      requestBody:
        description: New file to be stored
        content:
          image/*:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          $ref: '#/components/responses/MimeTypeError'
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - assets
      summary: Deletes an asset
      description: Deletes an asset by file name
      parameters:
        - name: fileName
          in: path
          description: File name of asset
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
  /posts:
    get:
      tags:
        - posts
      summary: Gets list of posts
      description: Gets list of all stored posts names
      responses:
        '200':
          $ref: '#/components/responses/FileList'
        '401':
          $ref: '#/components/responses/Unauthorized' 
    post:
      tags:
        - posts
      summary: Stores new post
      description: Stores new post by given content
      requestBody:
        description: HTML (or plain text) post content
        required: true
        content:
          text/html:
            schema:
              type: string
      responses:
        '201':
          $ref: '#/components/responses/CreatedAt'
        '401':
          $ref: '#/components/responses/Unauthorized' 
  /posts/{fileName}:
    get:
      parameters:
        - name: fileName
          in: path
          description: File name of post
          required: true
          schema:
            type: string
      tags:
        - posts
      summary: Returns post content
      description: Returns content by post file name
      responses:
        '200':
          description: Stored post content
          content:
            text/html:
              schema:
                type: string
                example: "<h1>title</h1>this is my content"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      parameters:
        - name: fileName
          in: path
          description: File name of post
          required: true
          schema:
            type: string
      tags:
        - posts
      summary: Updates a post
      description: Updates an existing post by new content
      requestBody:
        description: New post content
        content:
          text/html:
            schema:
              type: string
        required: true
      responses:
        '201':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - posts
      summary: Deletes a post
      description: Deletes a post by file name
      parameters:
        - name: fileName
          in: path
          description: File name of post
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
  /structure:
    get:
      tags:
        - structure
      summary: Gets list of structure files
      description: Gets list of all stored structure file names
      responses:
        '200':
          $ref: '#/components/responses/FileList'
        '401':
          $ref: '#/components/responses/Unauthorized' 
  /structure/{fileName}:
    get:
      parameters:
        - name: fileName
          in: path
          description: Structure file name
          required: true
          schema:
            type: string
      tags:
        - structure
      summary: Returns structure file content
      description: Returns structure file content by file name
      responses:
        '200':
          description: Stored structure file content
          content:
            text/html:
              schema:
                type: string
                example: "<h1>title</h1>this is my content"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      parameters:
        - name: fileName
          in: path
          description: Structure file name
          required: true
          schema:
            type: string
      tags:
        - structure
      summary: Updates a structure file
      description: Updates an existing structure file by new content
      requestBody:
        description: New structure file content
        content:
          text/html:
            schema:
              type: string
        required: true
      responses:
        '201':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
  /export:
    post:
      tags:
        - export
      summary: Exports stashed changes
      description: Exports stashed changes to directory and synchronizes assets
      responses:
        '201':
          description: Successful operation
        '401':
          $ref: '#/components/responses/Unauthorized' 
  /preview:
    get:
      tags:
        - export
      summary: Shows preview of stashed changes
      description: Shows preview of stashed changes
      responses:
        '200':
          description: Compiled HTML file
          content:
            text/html:
              schema:
                type: string
                example: "<h1>title</h1>this is my content"
        '401':
          $ref: '#/components/responses/Unauthorized' 